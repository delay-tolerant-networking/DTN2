#
# Makefile for DTN2/applib
#

# Source files generated by rpcgen
XDRSRCS        := dtn_types_xdr.c

# Sources for the client side of the library
CLIENTLIB_SRCS := 			\
		$(XDRSRCS)		\
		dtn_api.c		\
		dtn_ipc.c		\
		../version.c		\

# Sources for the server side of the library
SERVERLIB_SRCS := 			\
		$(XDRSRCS)		\
		APIServer.cc		\
		dtn_ipc.c		\

CLIENTLIB_OBJS := $(CLIENTLIB_SRCS:.c=.o)
CLIENTLIB_OBJS := $(CLIENTLIB_OBJS:.ccc=.o)

SERVERLIB_OBJS := $(SERVERLIB_SRCS:.c=.o)
SERVERLIB_OBJS := $(SERVERLIB_OBJS:.cc=.o)

ALLSRCS := $(CLIENTLIB_SRCS) $(SERVERLIB_SRCS)

#
# Default target is to build the two libraries
#
all: clientlib serverlib

#
# When dtn_types.x changes, we now manually rebuild dtn_types.h and
# dtn_types_xdr.c
#
.PHONY: xdrs
xdrs:
	-$(RM) -f dtn_types.h dtn_types_xdr.c
	rpcgen -h dtn_types.x -o dtn_types.h
	rpcgen -c dtn_types.x -o dtn_types_xdr.c

clientlib: libdtnapi.a
libdtnapi.a: $(CLIENTLIB_OBJS)
	rm -f $@
	ar ruc $@ $^
	ranlib $@ || true

serverlib: libdtnapisrv.a
libdtnapisrv.a: $(SERVERLIB_OBJS)
	rm -f $@
	ar ruc $@ $^
	ranlib $@ || true

#
# rpcgen emits code that has unused variables, so we can't use our
# normally stringent warnings
#
%_xdr.o: %_xdr.c
	@rm -f $@; mkdir -p $(@D)
	$(CC) $(CPPFLAGS) $(DEBUG) $(OPTIMIZE) -c $< -o $@

#
# Include the generated libraries in make clean
#
LIBFILES += libdtnapisrv.a libdtnapi.a

#
# Make sure SRCDIR is set (.. by default)
#
ifeq ($(SRCDIR),)
SRCDIR := ..
endif

#
# Include the common rules
#
include ../Rules.make

