#
# Makefile for DTN2/applib
#

# Header and source files generated by rpcgen
XDRHDRS := dtn_types.h
XDRSRCS := dtn_types_xdr.c

GENFILES := $(XDRHDRS) $(XDRSRCS) .cygwin-done

# Sources for the client side of the library
CLIENTLIB_SRCS := 			\
		$(XDRSRCS)		\
		dtn_api.c		\
		dtn_ipc.c		\
		../version.c		\

# Sources for the server side of the library
SERVERLIB_SRCS := 			\
		$(XDRSRCS)		\
		APIServer.cc		\
		dtn_ipc.c		\

CLIENTLIB_OBJS := $(CLIENTLIB_SRCS:.c=.o)
CLIENTLIB_OBJS := $(CLIENTLIB_OBJS:.ccc=.o)

SERVERLIB_OBJS := $(SERVERLIB_SRCS:.c=.o)
SERVERLIB_OBJS := $(SERVERLIB_OBJS:.cc=.o)

ALLSRCS := $(CLIENTLIB_SRCS) $(SERVERLIB_SRCS)

#
# Default target is to build the two libraries
#
all: copy_xdr clientlib serverlib

# The cygwin rpcgen is too broken to use (generates k&r files, cannot deal
# with some of the types we use, etc). So we use these pre-generated files
# from Linux's rpcgen. 
#
copy_xdr:
	@if [ "$(PLATFORM)" = "CYGWIN" -a ! -f .cygwin-done ]; then \
		echo "Copying cygwin/* to applib."; \
		cp cygwin/dtn_types.h .; \
		cp cygwin/dtn_types_xdr.c .; \
		touch .cygwin-done; \
	fi

clientlib: libdtnapi.a
libdtnapi.a: $(CLIENTLIB_OBJS)
	rm -f $@
	ar ruc $@ $^
	ranlib $@ || true

serverlib: libdtnapisrv.a
libdtnapisrv.a: $(SERVERLIB_OBJS)
	rm -f $@
	ar ruc $@ $^
	ranlib $@ || true

#
# Need special rules for the xdr generated sources
#
.SUFFIXES: .x
.x.h:
	-$(RM) -f $@
	rpcgen -h $< -o $@

%_xdr.c: %.x
	-$(RM) -f $@
	rpcgen -c $< -o $@

#
# rpcgen emits code that has unused variables, so we can't use our
# normally stringent warnings
#
%_xdr.o: %_xdr.c
	@rm -f $@; mkdir -p $(@D)
	$(CC) $(DEBUG) $(OPTIMIZE) -c $< -o $@

# All sources depend on the xdr headers
$(CLIENTLIB_SRCS) $(SERVERLIB_SRCS): $(XDRHDRS)

#
# Include the common rules
#
SRCDIR := ..
-include $(SRCDIR)/Rules.make

