#
# Makefile for DTN2/applib
#

# Header and source files generated by rpcgen
XDRHDRS := dtn_types.h
XDRSRCS := dtn_types_xdr.c

GENFILES := $(XDRHDRS) $(XDRSRCS)

# Sources for the client side of the library
CLIENTLIB_SRCS := 			\
		$(XDRSRCS)		\
		dtn_api.c		\
		dtn_ipc.c		\

# Sources for the server side of the library
SERVERLIB_SRCS := 			\
		$(XDRSRCS)		\
		APIServer.cc		\
		dtn_ipc.c		\

CLIENTLIB_OBJS := $(CLIENTLIB_SRCS:.c=.o)
CLIENTLIB_OBJS := $(CLIENTLIB_OBJS:.ccc=.o)

SERVERLIB_OBJS := $(SERVERLIB_SRCS:.c=.o)
SERVERLIB_OBJS := $(SERVERLIB_OBJS:.cc=.o)

ALLSRCS := $(CLIENTLIB_SRCS) $(SERVERLIB_SRCS)

#
# Default target is to build the two libraries
#
all: clientlib serverlib

clientlib: libdtnapi.a
libdtnapi.a: $(CLIENTLIB_OBJS)
	rm -f $@
	ar ruc $@ $^
	ranlib $@ || true

serverlib: libdtnapisrv.a
libdtnapisrv.a: $(SERVERLIB_OBJS)
	rm -f $@
	ar ruc $@ $^
	ranlib $@ || true

#
# Need special rules for the xdr generated sources
#
.SUFFIXES: .x
.x.h:
	-$(RM) -f $@
	$(RPCGEN) -h -N -C $< -o $@

# This little bit of sed hackery avoids a compiler warning due to the
# possibly unused variables.
%_xdr.c: %.x
	$(RPCGEN) -c -N $< -o $@.tmp
	cat $@.tmp | \
	sed 's/register int32_t \*buf;/& (void)buf;/' | \
	sed 's/int i;/& (void)i;/' | \
	cat > $@
	$(RM) -f $@.tmp

# All sources depend on the xdr headers
$(CLIENTLIB_SRCS) $(SERVERLIB_SRCS): $(XDRHDRS)

#
# Include the common rules
#
SRCDIR := ..
-include $(SRCDIR)/Rules.make

