#!/bin/sh
#

#
# Before anything else, check for configure --verbose
#
for ac_option do
   case "$ac_option" in
   -verbose | --verbose | -v)
      set -x
      break
      ;;
   esac
done

#
# Figure out srcdir based on the path to the configure script
#
confscript=$0
srcdir=`echo "$confscript" | sed 's%[\\/][^\\/][^\\/]*$%%'`
if test "$srcdir" = "$confscript" ; then
   srcdir=.
fi

if ! test -r "$srcdir/Rules.make.in" ; then
   echo "Can't find Rules.make.in in srcdir $srcdir"
   exit 1
fi

if ! test "$srcdir" = "." ; then
   echo "XXX/demmer support non-local srcdir"
   exit 1
fi

#########
#
# TARGET
#########
#
# native
# 
# cerfcube (or arm)
#

target=native
static=''
allstatic=''

#
# Defaults
#
cc='gcc'
ccver='auto'
depflags=''
make_static='n'
debug='-g'
# optimize='-O'
# optimizewarn='-Wuninitialized' # depends on -O
optimize=''
optimizewarn=''
nowarn=''
librpc=''

#
# External libraries
#
incdirs=
libdirs=
libs=
staticlibs=''

tclver='8.3'
tcldir='system'
tclincdir=''
tcllibdir=''
tcllib=''

db_enabled=1
dbversions='4.3 4.2'
dbdir='system'
dbincdir=''
dblibdir=''
dblib=''

postgres_enabled=0
postgresdir='none'
postgresincdir=''
postgreslibdir=''
postgreslib=''

mysql_enabled=0
mysqldir='none'
mysqlincdir=''
mysqllibdir=''
mysqllib=''

pthreadincdir=''
pthreadlibdir=''
pthreadlib='-lpthread'
pthreadstaticlib=''

#
# Parse user options
#
ac_prev=
for ac_option
do
  if  test -n "$ac_prev"; then
      eval "$ac_prev=\$ac_option"
      ac_prev=
      continue
  fi

  case "$ac_option" in
  -*=*) ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) ac_optarg= ;;
  esac

  case "$ac_option" in
  -verbose | --verbose | -v)
     ;;
  -target | --target | -t)
    ac_prev=target ;;
  -target=* | --target=* | -t=*)
    target="$ac_optarg" ;;

  -static | --static)
    make_static=y ;;
  -dynamic | --dynamic)
    make_static=n ;;

  -enable-debug | --enable-debug)
    debug='-g' ;;
  -disable-debug | --disable-debug)
    debug='' ;;

  -enable-optimize | --enable-optimize)
    optimize='-O'
    optimizewarn='-Wuninitialized'
    ;;
  -disable-optimize | --disable-optimize)
    optimize='' 
    optimizewarn=''
    ;;

  -with-gcc | --with-gcc | -with-cc | --with-cc)
    ac_prev=with-cc ;;
  -with-gcc=* | --with-gcc=* | -with-cc=* | --with-cc=*)
    cc="$ac_optarg" ;;

  -with-gccver | --with-gccver | -with-ccver | --with-ccver)
    ac_prev=with-cc ;;
  -with-gccver=* | --with-gccver=* | -with-ccver=* | --with-ccver=*)
    ccver="$ac_optarg" ;;

  -with-tcl | --with-tcl)
    ac_prev=with-tcl ;;
  -with-tcl=* | --with-tcl=*)
    tcldir="$ac_optarg" ;;

  -with-tclver | --with-tclver)
    ac_prev=with-tclver ;;
  -with-tclver=* | --with-tclver=*)
    tclver="$ac_optarg" ;;

  -with-db | --with-db)
    ac_prev=with-db ;;
  -with-db=* | --with-db=*)
    dbdir="$ac_optarg" ;;

  -with-dbver | --with-dbver)
    ac_prev=with-dbver ;;
  -with-dbver=* | --with-dbver=*)
    dbversions="$ac_optarg" ;;

  -with-postgres | --with-postgres)
    ac_prev=with-postgres ;;
  -with-postgres=* | --with-postgres=*)
    postgresdir="$ac_optarg" ;;

  -with-mysql | --with-mysql)
    ac_prev=with-mysql ;;
  -with-mysql=* | --with-mysql=*)
    mysqldir="$ac_optarg" ;;

  -help | --help | -h)
    cat <<EOF
Usage: configure [options]
Options [defaults in brackets after descriptions]
Directory and file names:
  --target=TARGET                 Configure for TARGET.  Valid targets are 'native'
                                  and 'arm' [$target]
  --static                        Build static objects and libraries (default)
  --dynamic                       Build using dynamic link libraries
Features
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-debug         compile with debugging turned off
  --disable-optimize      compile with optimization turned off
Packages
  --with-cc=GCC		  Version of the C/C++ compiler to use
  --with-ccver=VER        Version of the C/C++ compiler to use
  --with-tcl=DIR          Location of the tcl installation [$tcldir]
  --with-tclver=VERSION   Version of tcl to use [$tclver]

Storage Options:  
  --with-db=DIR			  Location of a Berkeley DB installation [$dbdir]
  --with-dbver=VERSION		  Berkeley DB versions to try [$dbversions]
  --with-postgres=DIR		  Location of a Postgres installation [$postgresdir]
  --with-mysql=DIR		  Location of a Mysql installation [$mysqldir]

  (set DIR=none   to disable the option)
  (set DIR=system to search default locations)
EOF
  exit 0
  ;;
  *)
    cat <<EOF
configure: unrecognized option \`$ac_option'.
Try \`configure --help' for more information.
EOF
  exit 1
  ;;
  esac
done

# XXX/demmer at least temporarily, run configure in oasys as well
if [ ! -f oasys/Rules.make ]; then
    echo "Configuring oasys library..."
    (cd oasys && ./configure $*)
fi

platform=`uname`
cygwin=`uname | sed 's/_.*$//'`

if [ "$cygwin" = "CYGWIN" ]; then
    aout="./a.exe"
    platform=$cygwin
else
    aout="./a.out"
fi

# Cygwin needs an extra -lrpc to link right and gives false alarms on
# printf warnings.
if [ "$cygwin" = "CYGWIN" ]; then
    librpc="-lrpc"
    nowarn="$nowarn -Wno-format"
fi

#
# Make sure the compiler a) works b) is some gcc variant and c) is an
# acceptable version.
#
if [ $target = "native" ]; then

cat > config.$$.c <<EOF
#include <stdio.h>
int 
main(int argc, const char** argv) {
    printf("%d.%d", __GNUC__, __GNUC_MINOR__);
}
EOF
$cc config.$$.c > /dev/null 2> /dev/null
if [ $? != 0 -o ! -f "$aout" ]; then
    echo "error: non-functional or non-gnu compiler $cc"
    exit 1
fi

rm -f config.$$.c

ccver=`$aout`
rm -f "$aout"

else # non-native target
    if [ $ccver = "auto" ]; then
        echo "Non-native target $target:"
        echo " must specify compiler version using --with-ccver"
        exit 1
    fi
fi

#
# Now set some options based on the compiler version
#
case "$ccver" in
    #
    # for gcc 2.9.X and 3.1, the auto-dependency features don't work, and 
    # _GNU_SOURCE isn't defined, so do both those things here
    #
    3.1|2.9*)
        defs="$defs -D_GNU_SOURCE"
	depflags=''
	echo "*** warning: using old compiler $cc version $ccver,"
	echo "             automatic dependency generation will not work"
	;;
    #
    # For later 3.X, use auto-dependency flags
    #
    3.*)
	depflags='-MMD -MP -MT "$*.o $*.E $*.po"'
	;;
    *)
	echo "error: unsupported compiler version $ccver"
	exit 1
	;;
esac

#
# Assume that if we're using gcc-xxx, we also want g++-xxx
#
cpp=`echo $cc | sed 's/cc/++/'`

#
# Set options to build statically
#
case "$make_static" in
    yes | y | true | t)
    static="-static"
    allstatic="-all-static"
    ;;

    *)
    ;;
esac

#
# Set platform-specific options for library extensions
#
libext=a
shlibext=so

#
# Find the tcl library
#
if [ ! "$tcldir" = "system" ]; then
  #
  # Make sure the directory the user specified is ok
  #
  if [ -r $tcldir/include/tcl.h ]; then
	tclincdir=-I$tcldir/include
  else
	echo "can't find tcl.h in $tcldir"
	exit 1
  fi

  if   [ -r $tcldir/lib/libtcl.$libext -o \
	 -r $tcldir/lib/libtcl.$shlibext ] ; then
	tcllibdir=-L$tcldir/lib
	tcllib=-ltcl

  elif [ -r $tcldir/lib/libtcl$tclver.$libext -o \
	 -r $tcldir/lib/libtcl$tclver.$shlibext ]; then
	tcllibdir=-L$tcldir/lib
	tcllib=-ltcl$tclver

  else
	echo "can't find libtcl.$libext or libtcl$tclver.$libext in $tcldir"
	exit 1
  fi

else
  #
  # Try to find a system installation
  #
  if [ -r /usr/include/tcl.h ]; then
	tclincdir=

  elif [ -r /usr/include/tcl$tclver/tcl.h ]; then
	tclincdir=-I/usr/include/tcl$tclver

  else
	echo "can't find usable tcl.h"
	exit 1
  fi

  if   [ -r /usr/lib/libtcl.$libext -o \
	 -r /usr/lib/libtcl.$shlibext ]; then
	tcllib=-ltcl

  elif [ -r /usr/lib/libtcl$tclver.$libext -o \
	 -r /usr/lib/libtcl$tclver.$shlibext ]; then
	tcllib=-ltcl$tclver

  else
	echo "can't find usable libtcl.$libext"
	exit 1
  fi
fi

#
# Find the berkeley db library (version 4.2)
#

db_help () {
cat <<EOF
Configure error with berkeleydb...

If your installed version is not one of [$dbversions], you may
have to specify it with --with-dbver.

If your installation is in a non-standard path, you can specify
it with --with-db=DIR.

To download the latest version, go to http://www.sleepycat.com
To build and install to /usr/local/BerkeleyDB-<version>:

# cd <db_download_dir>/build_unix
# ../dist/configure --enable-cxx
# make
# make install

EOF

}

#
# check if the user doesn't want berkeley db at all
#
if [ "$dbdir" = "none" ]; then
  db_enabled=0
else
  db_enabled=1

  #
  # check if the user have us a particlar installation directory,
  # otherwise try the standard locations
  #
  if [ "$dbdir" != "system" ]; then
      dbincdirs=$dbdir/include
      dblibdirs=$dbdir/lib
  else
      dbincdirs=/usr/include
      dblibdirs=/usr/lib

      for dbver in $dbversions ; do
         dbincdirs="$dbincdirs /usr/local/BerkeleyDB.$dbver/include"
         dblibdirs="$dblibdirs /usr/local/BerkeleyDB.$dbver/lib"
      done
  fi

  #
  # look for the header files
  #
  echo -n "checking for db.h and db_cxx.h ... "
  found=0
  foundfile=0
  for dir in $dbincdirs; do
    if [ -r $dir/db.h -a -r $dir/db_cxx.h ] ; then
        foundfile=1
        for dbver in $dbversions ; do
          grep DB_VERSION_STRING $dir/db.h | grep $dbver >/dev/null 2>/dev/null
          if [ $? = 0 ]; then
              if [ $dir != "/usr/include" ]; then
                  dbincdir=-I$dir
              fi
              found=1
              break
          fi
        done
        if [ $found = 1 ] ; then
            break
        fi
      fi
  done
    
  if [ $found = 1 ]; then
     echo "found in $dir"
  else
     if [ $foundfile = 1 ] ; then 
       echo "error: found db.h and/or db_cxx.h with incorrect version"
     else
       echo "error: can't find db.h and/or db_cxx.h in $dbincdirs"
     fi

     db_help
     exit 1
  fi

  #
  # and the library files
  #    
  echo -n "checking for libdb-$dbver.$libext and libdb_cxx-$dbver.$libext... "
  found=0
  for dbver in $dbversions ; do
    for dir in $dblibdirs; do
      if [ -r $dir/libdb-$dbver.$libext -a  \
           -r $dir/libdb_cxx-$dbver.$libext ]
      then
          if [ $dir != "/usr/lib" ]; then
                  dblibdir=-L$dir
          fi
          dblib="-ldb-$dbver -ldb_cxx-$dbver"
          found=1
          break
      fi
    done
    if [ $found = 1 ] ; then
        break
    fi
  done

  if [ $found = 1 ]; then
    echo "found in $dir"
  else
    echo "error: can't find libdb-$dbver.$libext and/or libdb_cxx-$dbver.$libext"\
         "in lib directories (tried $dblibdirs)"
    exit 1
  fi
fi

#
# Find the postgres dlibrary
#
#
if [ "$postgresdir" = "none" ]; then
  postgres_enabled=0
else
  postgres_enabled=1
  postgreslib="-lpq"
  if [ ! "$postgresdir" = "system" ]; then
	  #
	  # check the supplied directory
	  #
	  postgresincdir=$postgresdir/include/
	  if   [ ! -r $postgresincdir/libpq-fe.h ] ; then
		echo "can't find libpq.h in $postgresincdir"
	  	exit 1
	  else
	      postgresincdir=-I$postgresincdir
	  fi

	  postgreslibdir=$postgresdir/lib
	  if   [ ! -r $postgreslibdir/libpq.$libext ] ; then
		echo "can't find libpq.$libext in $postgreslibdir"
	  	exit 1
	  else
		postgreslibdir=-L$postgreslibdir
	  fi
   else
	#
	# try to find a system installation
	#
        if   [ -r /usr/include/libpq-fe.h ]; then
		postgresincdir=

	elif   [ -r /usr/include/postgresql/libpq-fe.h ]; then
		postgresincdir=-I/usr/include/postgresql

	elif [ -r /usr/local/pgsql/include/libpq-fe.h ]; then
		postgresincdir=-I/usr/local/pgsql/include

	else
		echo "can't find libpq-fe.h"
		exit 1
	fi

 	if   [ -r /usr/lib/libpq.$libext ]; then
 		postgreslibdir=
	elif [ -r /usr/lib/pgsql/libpq.$libext ]; then
 		postgreslibdir=-L/usr/lib/pgsql
 	elif [ -r /usr/local/pgsql/lib/libpq.$libext ]; then
 		postgreslibdir=-L/usr/local/pgsql/lib
 	else
 		echo "can't find libpq.$libext"
 		exit 1
 	fi
   fi
fi

#
# Find the mysql dlibrary
#
#
if [ "$mysqldir" = "none" ]; then
  mysql_enabled=0
else
  mysql_enabled=1
  mysqllib="-lmysqlclient"
  if [ ! "$mysqldir" = "system" ]; then
	  #
	  # check the supplied directory
	  #
	  mysqlincdir=$mysqldir/include/
	  if   [ ! -r $mysqlincdir/mysql.h ] ; then
		echo "can't find mysql.h in $mysqlincdir"
	  	exit 1
	  else
	      mysqlincdir=-I$mysqlincdir
	  fi

	  mysqllibdir=$mysqldir/lib
	  if   [ ! -r $mysqllibdir/libmysqlclient.$libext ] ; then
		echo "can't find libmysqlclient.$libext in $mysqllibdir"
	  	exit 1
	  else
		mysqllibdir=-L$mysqllibdir
	  fi
   else
	#
	# try to find a system installation
	#
        if   [ -r /usr/include/mysql.h ]; then
	    mysqlincdir=

	elif   [ -r /usr/include/mysql/mysql.h ]; then
		mysqlincdir=-I/usr/include/mysql

	elif [ -r /usr/local/mysql/include/mysql.h ]; then
		mysqlincdir=-I/usr/local/mysql/include

	else
		echo "can't find mysql.h"
		exit 1
	fi

	if   [ -r /usr/lib/libmysqlclient.$libext ]; then
 		mysqllibdir=
 	elif   [ -r /usr/lib/mysql/libmysqlclient.$libext ]; then
 		mysqllibdir=-L/usr/lib/mysql/
 	elif [ -r /usr/local/mysql/lib/libmysqlcient.$libext ]; then
 		mysqllibdir=-L/usr/local/mysql/lib
 	else
 		echo "can't find libmysqlcient.$libext"
 		exit 1
 	fi
   fi
fi

#
# Make sure there's at least one valid storage option
#
if [ ! $db_enabled = 1 -a \
     ! $mysql_enabled = 1 -a \
     ! $postgres_enabled = 1 ] ;
then
    echo "Must enable at least one storage option"
    exit 1
fi

#
# Figure out if at least one sql option is enabled.
#
if [ $mysql_enabled = 1 -o $postgres_enabled = 1 ]; then
    sql_enabled=1
else
    sql_enabled=0
fi


#
# Cons together the various directories. 
#
# i.e: incdir="$tclincdir $dbincdir $postgresincdir..."
#      libdir="$tcllibdir $dblibdir $postgreslibdir..."
#
#
for what in incdir libdir lib staticlib ;  do
  cmd="$what"s=\"
  for lib in tcl db postgres mysql pthread ; do
	cmd=$cmd\$"$lib$what "
  done
  cmd=$cmd\"
  eval $cmd
done

#
# Tack on the dependency libs if we're building statically
#
if [ "$make_static" = "y" ]; then
	libs="$libs -ldl" 
fi

echo "DTN2 configure state:"
echo "Target/Tools:"
echo "  TARGET is: $target"
echo "  CC is: $cc"
echo "  CPP is: $cpp"
echo " "
echo "Options:"
echo "  Debug: $debug"
echo "  Optimize: $optimize"
echo "  Static: $make_static"
echo " "
echo "Packages"
echo "  tcl: $tclincdir $tcllibdir $tcllib"
echo "  db: $dbincdir $dblibdir $dblib"
echo "  postgres: $postgresincdir $postgreslibdir $postgreslib"
echo "  mysql: $mysqlincdir $mysqllibdir $mysqllib"

rm -f Rules.make
echo > Rules.make <<EOF
#
# This file was automatically generated by configure.
#
#                     !!! DO NOT EDIT !!!
#
#
EOF

sed -e "
s%@PLATFORM@%$platform%g
s%@TARGET@%$target%g
s%@SRCDIR@%$srcdir%g
s%@CFLAGS@%$cflags%g
s%@STATIC@%$static%g
s%@CC@%$cc%g
s%@CPP@%$cpp%g
s%@DEPFLAGS@%$depflags%g
s%@DEBUG@%$debug%g
s%@OPTIMIZE@%$optimize%g
s%@OPTIMIZE_WARN@%$optimizewarn%g
s%@INCDIRS@%$incdirs%g
s%@LIBDIRS@%$libdirs%g
s%@LIBS@%$libs%g
s%@LIBRPC@%$librpc%g
s%@STATIC_LIBS@%$staticlibs%g
s%@PTHREAD_FLAG@%$pthreadflag%g
s%@NOWARN@%$nowarn%g

" Rules.make.in >> Rules.make
chmod oag-w Rules.make

rm -f config.h
echo > config.h <<EOF
/*
 * This file was automatically generated by configure.
 *
 *                    !!! DO NOT EDIT !!!
 */
EOF

sed -e "
s%@db_enabled@%$db_enabled%g
s%@mysql_enabled@%$mysql_enabled%g
s%@postgres_enabled@%$postgres_enabled%g
s%@sql_enabled@%$sql_enabled%g
" config.h.in >> config.h
chmod oag-w config.h

echo ""
echo "wrote Rules.make; now run make"
