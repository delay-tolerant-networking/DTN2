
log /daemon INFO "bundle daemon config running..."

set loopback [test set loopback]

#
# initialize storage
#
if {$loopback != 0} {
    storage set sqldb "dtn$loopback"
}
storage init postgres

set port 5000
set localhost "localhost"
set peer ""

if {$loopback != 0} {
    set localhost "10.0.0.$loopback"
}

# set a local tcp interface
interface bundles://internet/tcp://$localhost:$port/

#
# set up routing...
#

# with a a local region route to the peer...
if {$loopback != 0} {
    
    if {$loopback == 1} {
	set peer 10.0.0.2
	
    } elseif {$loopback == 2} {
	set peer 10.0.0.1
    }

    route add bundles://internet/tcp://$peer/*\
	    bundles://internet/tcp://$peer:$port/ ONDEMAND

    if {$loopback != 1} {
	route add bundles://internet/*\
		bundles://internet/tcp://$peer:$port/ ONDEMAND
    }
}


# and a few bogus ones just for fun
route add bundles://internet1/* bundles://internet/tcp://0.0.0.1:1000/ ONDEMAND
route add bundles://internet2/* bundles://internet/tcp://0.0.0.2:1000/ ONDEMAND
route add bundles://internet3/* bundles://internet/tcp://0.0.0.3:1000/ ONDEMAND

# test proc for sending a bundle
proc sendbundle {} {
    global localhost peer port
    bundle inject bundles://internet/tcp://$localhost:$port/	\
	    	  bundles://internet/tcp://$peer:$port/demux	\
		  "test bundle payload data"
}

# and one for sending a bundle with hex data (doesn't really work
proc sendbundlehex {} {
    global localhost peer port
    bundle inject bundles://internet/tcp://$localhost:$port/	\
	    	  bundles://internet/tcp://$peer:$port/demux	\
		  [binary format i {12345678}]
}

#
# Use the initscript hook to store some code we want run only _after_
# everything else is initialized
#
test set initscript {
    registration logger add bundles://*/*
    if {$loopback == 2} { sendbundlehex }
}
