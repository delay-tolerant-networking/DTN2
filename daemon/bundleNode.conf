
log /daemon INFO "bundle daemon config being parsed..."

#
# Default routing configuration
#
route local_region "internet"
route local_tuple  "bundles://internet/host://[info hostname]"

set id [test set id]
#storage set tidy 1
set tidy    [storage set tidy]

set port 5000
set sqldb "dtn"
set dbdir "/tmp/bundledb"
set payloaddir  "/tmp/bundles"
set localhost "localhost"
set peer "localhost"
set localdir  "/tmp/incoming-bundles"

#
# pull in the test utilities
#
source "test/dtn-test.tcl"
route set type "static"

if {$id != 0} {
    storage set sqldb "dtn$id"
    set dbdir  /tmp/bundledb-$id
    set payloaddir /tmp/bundles-$id
    set localhost 10.0.0.$id
    set localdir  /tmp/incoming-bundles-$id

    route local_tuple "bundles://internet/host://$localhost"

    api set local_addr $localhost
    
    if {$id == 1} {
	set peer    10.0.0.2
	set peerdir /tmp/incoming-bundles-2
	
    } elseif {$id == 2} {
	set peer    10.0.0.1
	set peerdir /tmp/incoming-bundles-1

    } else {
	error "invalid id value $id"
    }

    foreach dir [list $dbdir $payloaddir $localdir $peerdir] {
	if {! [file exists $dir]} {
	    file mkdir $dir
	}
    }
}

# clean up
if {$tidy} {
    puts "tidy option set, cleaning payload and local file dirs"
    foreach dir [list $dbdir $payloaddir $localdir] {
	file delete -force $dir
	file mkdir $dir
    }
}

# validate the directories (XXX/demmer move this into C eventually)
foreach dirtype [list dbdir payloaddir localdir] {
    set dir [set $dirtype]
    if {! [file exists $dir]} {
	error "$dirtype directory $dir doesn't exist"
    }
    
    if {[file type $dir] != "directory"} {
	error "$dirtype directory $dir is not a directory"
    }

    if {[glob -nocomplain $dir/*] != {}} {
	error "$dirtype directory $dir not empty and re-reading state not implemented \
		(use the -t option)"
    }
}



# initialize storage
storage set sqldb $sqldb
storage set dbdir $dbdir

# XXX/demmer make this "storage type"
storage init berkeleydb

# set the payload directory and other params
param set payload_dir $payloaddir
param set tcpcl_ack_blocksz 4096
#param set payload_mem_threshold 0

param set proactive_frag_threshold 495

# param set payload_test_no_remove true
param set tcpcl_test_fragment_size 500

# set a local tcp interface
set tcp_local_tuple bundles://internet/tcp://$localhost:$port/
interface $tcp_local_tuple

# and a file one
set file_local_tuple file://unix/file://$localdir/
# interface $file_local_tuple

#
# set up routing...
#

# XXX/demmer add a "route router foo" hook
# XXX/demmer this could also append a trial-mode algorithm

if {$id != 0} {
    set tcp_peer_tuple bundles://internet/tcp://$peer:$port/
    
    # with a tcp route 
    route add bundles://internet/host://$peer $tcp_peer_tuple ONDEMAND
    route add bundles://internet/host://$peer/* $tcp_peer_tuple ONDEMAND
    
    # and/or a file route 
#     route add bundles://internet/bundles://$peer/* \
#  	    bundles://internet/file://$peerdir/ ONDEMAND
}

# test proc for sending a bundle
proc sendbundle {} {
    global localhost peer port
    set length  1048576
    set length  5000

    set payload "test bundle payload data\n"

    while {$length - [string length $payload] > 32} {
	append payload [format "%4d: 0123456789abcdef\n" [string length $payload]]
    }
    while {$length > [string length $payload]} {
	append payload "."
    }
    
    bundle inject bundles://internet/host://$localhost/	\
	    	  bundles://internet/host://$peer/demux	\
		  $payload $length
}

# set up the test smtp daemon
set testsmtpd 0
if {$testsmtpd} {
    smtpd_start 2500
}

#
# Use the initscript hook to store some code we want run only _after_
# everything else is initialized
#
test set initscript {
    registration add logger bundles://*/*

    proc test_bundle_arrived {regid bundle_info} {
	foreach {source dest payload length} $bundle_info {}
	puts "bundle arrival"
	puts "source:  $source"
	puts "dest:    $dest"
	puts "length:  $length"
	puts "payload: [string range $payload 0 64]"
    }

#    tcl_registration bundles://*/* test_bundle_arrived

#     registration add rate bundles://*/* 5000

    file_injector_start $localdir bundles://internet/bundles://$localhost/ \
	    bundles://internet/bundles://$peer/demux
    
    if {$id == 2} {
#	sendbundle
    }

#     if {$testsmtpd} {
# 	puts "sending test mail..."
# 	send_test_mail
#     }
}
