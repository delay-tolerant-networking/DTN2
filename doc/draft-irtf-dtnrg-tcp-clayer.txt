


Network Working Group                                          M. Demmer
Internet-Draft                              UC Berkeley / Intel Research
Expires: September 4, 2005                                 March 3, 2005


            Protocol for the TCP Bundling Convergence Layer
                   draft-irtf-dtnrg-bundle-tcpcl.txt

Status of this Memo

   This document is an Internet-Draft and is subject to all provisions
   of Section 3 of RFC 3667.  By submitting this Internet-Draft, each
   author represents that any applicable patent or other IPR claims of
   which he or she is aware have been or will be disclosed, and any of
   which he or she become aware will be disclosed, in accordance with
   RFC 3668.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 4, 2005.

Copyright Notice

   Copyright (C) The Internet Society (2005).

Abstract

   This internet draft describes a protocol for implementing a
   Convergence Layer as described in the Architecture for Delay Tolerant
   Networking [2] (DTN), using the TCP transport protocol.







Demmer                  Expires September 4, 2005               [Page 1]

Internet-Draft       TCP Bundling Convergence Layer           March 2005


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Contact Header . . . . . . . . . . . . . . . . . . . . . . . .  3
   3.  Contact header validation and negotiation  . . . . . . . . . .  5
   4.  Message Type Codes . . . . . . . . . . . . . . . . . . . . . .  5
   5.  Bundle Data  . . . . . . . . . . . . . . . . . . . . . . . . .  6
   6.  Bundle Acknowledgements  . . . . . . . . . . . . . . . . . . .  7
   7.  Partial Bundle Acknowledgements  . . . . . . . . . . . . . . .  8
   8.  Keepalive Messages . . . . . . . . . . . . . . . . . . . . . .  8
   9.  Idle Connection Shutdown . . . . . . . . . . . . . . . . . . .  8
   10.   Receiver Initated Connection . . . . . . . . . . . . . . . .  8
   11.   Requirements notation  . . . . . . . . . . . . . . . . . . .  8
   12.   Security Considerations  . . . . . . . . . . . . . . . . . .  8
   13.   References . . . . . . . . . . . . . . . . . . . . . . . . .  8
       Author's Address . . . . . . . . . . . . . . . . . . . . . . .  8
       Intellectual Property and Copyright Statements . . . . . . . .  9


































Demmer                  Expires September 4, 2005               [Page 2]

Internet-Draft       TCP Bundling Convergence Layer           March 2005


1.  Introduction

   This document describes the protocol used when implementing a TCP
   Convergence Layer, as described in the Architecture for Delay
   Tolerant Networking [2] (DTN).

   Note that this document describes version 2 of the protocol.  Version
   1 was never specified in an Internet Draft or other public document,
   although it was implemented in the DTN reference implementation [3]
   versions 2.0.1 and 2.0.2.

   Communication between two Bundle daemons using the TCP Convergence
   Layer is initiated by one daemon opening a TCP session via the normal
   TCP connection establishment mechanism (i.e.  the connect() call in
   the BSD sockets API).  This operation establishes a new TCP session
   between the two nodes, herein termed a "connection".

   In this protocol, one side of the connection is termed the "sender"
   and one side is the "receiver".  All bundle transmissions occur in
   only one direction, from sender to receiver.  However, other messages
   are transmitted from receiver to sender, as described below.  In
   addition, as will be described in Section 10, the party that
   initiates the TCP connection is not necessarily the sender.

   XXX something about byte order

2.  Contact Header

   When a connection is established between a sender and receiver, both
   parties MUST transmit a Contact Header upon establishing a
   connection.




















Demmer                  Expires September 4, 2005               [Page 3]

Internet-Draft       TCP Bundling Convergence Layer           March 2005


   The format for the Contact Header is as follows:

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+---------------+---------------+
   |                     magic='dtn'               |    version    |
   +---------------+---------------+---------------+---------------+
   |     flags     |  __unused__   |        partial_ack_len        |
   +---------------+---------------+---------------+---------------+
   |        idle_close_time        |       keepalive_interval      |
   +---------------+---------------+---------------+---------------+

                    Figure 1: Contact Header Format

   The fields of the contact header are:

   magic: A three byte field that always contains the bytes (in order)
        0x64 0x76 0x6e, i.e.  the ASCII string "dtn".

   version: A one byte field value containing the current version of the
        protocol.

   flags: A one byte field containing optional connection flags.  The
        first five bits are unused and must be set to zero.  The last
        three bits are interpreted as follows.

        +-------+----------------------------------------------+
        | Value |                    Meaning                   |
        +-------+----------------------------------------------+
        |  001  | Request acknowledgement of bundle reception. |
        |  010  |     Connection initiator is the receiver.    |
        |  100  |        Request reactive fragmentation.       |
        +-------+----------------------------------------------+

                     Table 1: Contact Header Flags

   __unused__: A one byte field that is ignored.

   partial_ack_len: A two byte field containing the length in bytes for
        which partial reception acknowledgements are requested (see
        Section 7).

   idle_close_time: A two byte field containing the number of seconds
        that a connection should be maintained when no data (bundles or
        acknowledgements) are being exchanged (see Section 9).






Demmer                  Expires September 4, 2005               [Page 4]

Internet-Draft       TCP Bundling Convergence Layer           March 2005



   keepalive_interval: A two byte field containing the number of seconds
        between exchanges of keepalive messages on the connection (see
        Section 8).

3.  Contact header validation and negotiation

   Upon receipt of the contact header from the other side, both the
   sender and receiver follow the following semantics for validating the
   the value of each connection flag and parameter.

   If either side does not send the correct magic string, the connection
   SHOULD be terminated.  The intent of the magic string is to provide
   some more apparent protection against an inadvertent connection to a
   TCP convergence layer.  To prevent a flood of repeated connections,
   either side may choose to hold an invalid connection open for some
   time before closing it.

   If one party receives a version number that is greater than that
   node's current version of the protocol, the receiver SHOULD interpret
   all fields as described in this document.  This behavior rests on the
   assumption that future revisions of this protocol will continue to be
   backwards-compatible.  However, if either side receives version
   number 21 (i.e.  the ascii code '!'), then the other side is assumed
   to be an implementation of version 1 of the protocol, and the
   connection SHOULD therefore be terminated.

   XXX fill in the rest of the negotiation parameters

4.  Message Type Codes

   After the initial exchange of a contact header, all messages
   transmitted over the connection are preceded by a one byte message
   type code.

















Demmer                  Expires September 4, 2005               [Page 5]

Internet-Draft       TCP Bundling Convergence Layer           March 2005


   The types and values for the message type code are as follows.

   +-------------+-------+---------------------------------------------+
   |    Header   |  Type | Comment                                     |
   +-------------+-------+---------------------------------------------+
   | BUNDLE_DATA |  0x01 | Precedes the transmission of a Bundle Data  |
   |             |       | Header, which itself precedes the           |
   |             |       | transmission of a Bundle.                   |
   |  BUNDLE_ACK |  0x02 | Precedes the transmission of a Bundle       |
   |             |       | Acknowledgement Header.                     |
   |  KEEPALIVE  |  0x03 | Described in Section 8.                     |
   |   SHUTDOWN  |  0x04 | Indicates that the transmitting side of the |
   |             |       | connection wishes to cleanly terminate the  |
   |             |       | connection.                                 |
   +-------------+-------+---------------------------------------------+

                      Table 2: TCPCL Header Types


5.  Bundle Data

   The sender side transmits a bundle to the receiver side by first
   transmitting a BUNDLE_DATA message code, and then transmitting a
   Bundle Data Header.

   The format for the Bundle Data Header and the preceding type is as
   follows.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+
   | BUNDLE_DATA   |
   +---------------+---------------+---------------+---------------+
   |                           bundle_id                           |
   +---------------+---------------+---------------+---------------+
   |                         bundle_length                         |
   +---------------+---------------+---------------+---------------+
   |         header_length         |          __unused__           |
   +---------------+---------------+---------------+---------------+

                  Figure 2: Bundle Data Header Format

   The fields of the bundle data header are:

   bundle_id: A four byte field that contains an identifier for the
        bundle at the sender.  The format and specification for this
        field is implementation specific.




Demmer                  Expires September 4, 2005               [Page 6]

Internet-Draft       TCP Bundling Convergence Layer           March 2005



   bundle_length: A four byte field the contains the total length of the
        bundle transmission that immediately follows.

   header_length: A two byte field the contains the total length of the
        bundle transmission that follows the bundle data header.

   __unused__: A two byte field that is ignored.

   Immediately following the Bundle Data Header is the transmission of a
   bundle, as specified in XXX cite bundle protocol.

6.  Bundle Acknowledgements

   When sending acknowledgements of receipt of data, the receiver side
   of the connection first transmits a BUNDLE_ACK message type code and
   then transmits a Bundle Acknowledgement Header.

   The format for the Bundle Acknowledgement Header and the preceding
   type code is as follows.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+
   |  BUNDLE_ACK   |
   +---------------+---------------+---------------+---------------+
   |                           bundle_id                           |
   +---------------+---------------+---------------+---------------+
   |                          acked_length                         |
   +---------------+---------------+---------------+---------------+

             Figure 3: Bundle Acknowledgement Header Format

   The fields of the bundle acknowledgement header are:

   bundle_id: A four byte field that contains the identifier for the
        bundle at the sender that was transmitted in the bundle data
        header.

   acked_length: A four byte field the contains the total length in
        bytes of the amount of data that has been successfully received
        and is being acknowledged.

   If, during the exchange of contact headers, both the sender and
   receiver set the BUNDLE_ACK_ENABLED flag (see Section 2), then when
   it successfully receives a bundle, the receiver MUST transmit a
   bundle acknowledgement header.




Demmer                  Expires September 4, 2005               [Page 7]

Internet-Draft       TCP Bundling Convergence Layer           March 2005


7.  Partial Bundle Acknowledgements

   The protocol also includes a provision for bundle acknowledgements to
   be transmitted before the entire bundle is received.  The motivation
   behind this feature is to enable the bundle daemon to implement
   "reactive fragmentation", splitting a bundle into two fragments if a
   connection is interrupted before the entire transmission is
   completed.

   As described in Section 2, one of the parameters in the Contact
   Header is the partial_ack_len.  The sender populates this field with
   a length in bytes, which the sender requests to receive
   acknowledgements of meaning of this field is a byte length which the
   sender requests to

8.  Keepalive Messages

9.  Idle Connection Shutdown

10.  Receiver Initated Connection

11.  Requirements notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [1].

12.  Security Considerations

   None.

13.  References

   [1]  YZ, X., "XXX".

   [2]  Cerf et al, V., "Delay-Tolerant Network Architecture".

   [3]  Demmer et al, M., "Implementing Delay Tolerant Networking".


Author's Address

   Michael J. Demmer
   University of California, Berkeley Intel Research Berkeley







Demmer                  Expires September 4, 2005               [Page 8]

Internet-Draft       TCP Bundling Convergence Layer           March 2005


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2005).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Demmer                  Expires September 4, 2005               [Page 9]

