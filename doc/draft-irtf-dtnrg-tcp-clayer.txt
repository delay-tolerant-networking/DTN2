


Delay Tolerant Networking Research                             M. Demmer
Group                                                        UC Berkeley
Internet-Draft                                           August 17, 2006
Intended status: Experimental
Expires: February 18, 2007


        Delay Tolerant Networking TCP Convergence Layer Protocol
                    draft-irtf-dtnrg-tcp-clayer.txt

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on February 18, 2007.

Copyright Notice

   Copyright (C) The Internet Society (2006).

Abstract

   This document describes a protocol for a TCP-based Convergence Layer
   for Delay Tolerant Networking (DTN).








Demmer                  Expires February 18, 2007               [Page 1]

Internet-Draft          DTN TCP Convergence Layer            August 2006


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1.  Definitions Relating to the Bundle Protocol  . . . . . . .  4
     2.2.  Definitions specific to the TCPCL Protocol . . . . . . . .  5
   3.  General Protocol Description . . . . . . . . . . . . . . . . .  6
     3.1.  Example Data Flow  . . . . . . . . . . . . . . . . . . . .  8
   4.  Connection Establishment . . . . . . . . . . . . . . . . . . .  9
     4.1.  Contact Header . . . . . . . . . . . . . . . . . . . . . .  9
     4.2.  Validation and parameter negotiation . . . . . . . . . . . 10
     4.3.  Announcement Bundle Exchange . . . . . . . . . . . . . . . 11
   5.  Established Connection Operation . . . . . . . . . . . . . . . 12
     5.1.  Message Type Codes . . . . . . . . . . . . . . . . . . . . 12
     5.2.  Bundle Data Transmission . . . . . . . . . . . . . . . . . 13
     5.3.  Bundle Acknowledgements  . . . . . . . . . . . . . . . . . 14
     5.4.  Keepalive Messages . . . . . . . . . . . . . . . . . . . . 14
   6.  Connection Termination . . . . . . . . . . . . . . . . . . . . 15
     6.1.  Shutdown Message . . . . . . . . . . . . . . . . . . . . . 15
     6.2.  Idle Connection Shutdown . . . . . . . . . . . . . . . . . 15
   7.  Requirements notation  . . . . . . . . . . . . . . . . . . . . 16
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 16
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 16
   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 16
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 16
   Intellectual Property and Copyright Statements . . . . . . . . . . 17

























Demmer                  Expires February 18, 2007               [Page 2]

Internet-Draft          DTN TCP Convergence Layer            August 2006


1.  Introduction

   This document describes a TCP based convergence layer protocol for
   Delay Tolerant Networking (TCPCL).  Delay Tolerant Networking is an
   end-to-end architecture providing communications in and/or through
   highly stressed environments, including those with intermittent
   connectivity, long and/or variable delays, and high bit error rates.
   More detailed descriptions of the rationale and capabilities of these
   networks can be found in the Delay-Tolerant Network Architecture [2]
   Internet Draft.

   An important goal of the DTN architecture is to accomodate a wide
   range of networking technologies and environments.  The protocol used
   for DTN communications is the Bundling Protocol (BP) [3], an
   application-layer protocol that is used to construct a store-and-
   forward overlay network.  As described in the bundle protocol
   specification, BP requires the services of a "convergence layer
   adapter" (CLA) to send and receive bundles using an underlying
   internet protocol.  This document describes one such convergence
   layer adapter that uses the well-known Transmission Control Protocol
   (TCP) [5].

   The locations of the TCPCL and BP in the Internet model protocol
   stack are shown in Figure Figure 1.  In particular, both the BP and
   the TCPCL sit at the application layer, while TCP and IP sit at their
   normal layers.

      +-------------------------+
      |     DTN Application     | -\
      +-------------------------|   |
      |  Bundle Protocol (BP)   |   -> Application Layer
      +-------------------------+   |
      | TCP Conv. Layer (TCPCL) | -/
      +-------------------------+
      |          TCP            | ---> Transport Layer
      +-------------------------+
      |           IP            | ---> Network Layer
      +-------------------------+
      |   Link-Layer Protocol   | ---> Link Layer
      +-------------------------+
      |    Physical Medium      | ---> Physical Layer
      +-------------------------+

        Figure 1: The locations of the bundle protocol and the TCP
         convergence layer protocol in the Internet protocol stack

   This document describes the format of the protocol data units passed
   between entities participating in TCPCL communications.  This



Demmer                  Expires February 18, 2007               [Page 3]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   document does not address:

        The format of protocol data units of the bundling protocol, as
        those are defined elsewhere [3].

        Mechanisms for locating or identifying other bundle nodes within
        an internet.

        Operational logic or procedures used to implement this protocol.


   Note that this document describes version 3 of the protocol.
   Versions 0, 1, and 2 were never specified in any Internet Draft, RFC,
   or any other public document.  These prior versions of the protocol
   were, however, implemented in the DTN reference implementation [4],
   in prior releases, hence this specification reflects those prior
   versions.

   The current protocol is implemented by the DTN reference
   implementation release 2.3.0.  XXX Should release this before
   publishing this document.


2.  Definitions

2.1.  Definitions Relating to the Bundle Protocol

   The following set of definitions are abbreviated versions of those
   which appear in the Bundle Protocol Specification [3].  To the extent
   in which terms appear in both documents, they are intended to have
   the same meaning.
   Bundle --  A bundle is a protocol data unit of the DTN bundle
        protocol.

   Bundle payload --  A bundle payload (or simply "payload") is the
        application data whose conveyance to the bundle's destination is
        the purpose for the transmission of a given bundle.

   Fragment --  A fragment is a bundle whose payload contains a range of
        bytes from another bundle's payload.

   Bundle node --  A bundle node (or simply a "node") is any entity that
        can send and/or receive bundles.  The particular instantiation
        of this entity is deliberately unconstrained, allowing for
        implementations in software libraries, long-running processes,
        or even hardware.  One component of the bundle node is the
        implementation of a convergence layer adapter.




Demmer                  Expires February 18, 2007               [Page 4]

Internet-Draft          DTN TCP Convergence Layer            August 2006



   Convergence layer adapter --  A convergence layer adapter (CLA) sends
        and receives bundles utilizing the services of some 'native'
        internet protocol.  This document describes the manner in which
        a CLA sends and receives bundles when using the TCP protocol for
        inter-node communication.

   Self Describing Numeric Value --  A self describing numeric value
        (SDNV) is a variable length encoding for integer values, defined
        in the bundle protocol specification.


2.2.  Definitions specific to the TCPCL Protocol

   This section contains definitions that are interpreted to be specific
   to the operation of the TCPCL protocol, as described below.

   TCP Session --  A TCP Session refers to the connection using the TCP
        network transport.  XXX cite something from the TCP RFC.

   Connection --  A connection is a TCPCL communication session between
        two bundle nodes.  The lifetime of a connection is one-to-one
        with the lifetime of an underlying TCP session.  Therefore a
        TCPCL connection is initated when a bundle node initiates a TCP
        session to be initiated for the purposes of bundle
        communication.  A connection is terminated when the TCP session
        ends, due either to one or both nodes actively terminating the
        connection or due to network errors causing a failure of the
        session.

   Connection parameters --  The connection parameters are a set of
        values used to affect the operation of the TCPCL for a given
        connection.  The manner in which these parameters are conveyed
        to the bundle node and thereby to the TCPCL is implementation
        dependant.  However, the mechanism by which two bundle nodes
        exchange and negotiate the values to be used for a given
        connection is described in Secion Section 4.2.

   Connection initiator --  The connection initiator is the bundle node
        that causes the establishment of a new connection by creating a
        new TCP session (for example, by using the connect() call in the
        BSD sockets API) and then following the procedures described in
        Section 4.








Demmer                  Expires February 18, 2007               [Page 5]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   Connection acceptor --  The connection acceptor is the bundle node
        that establishes a connection in response to an active
        connection attempt by another bundle node (for example, by using
        the listen() and accept() calls of the BSD sockets API) and then
        following the procedures described in Section 4.

   Transmission --  Transmission refers to the procedures and mechanisms
        (described below) for conveyance of a bundle from one node to
        another.




3.  General Protocol Description

   This protocol provides bundle conveyance over a TCP connection.  The
   general operation of the protocol is as follows:

   First one node establishes a connection to the other by initiating a
   TCP session.  At the beginning of the connection, an initial contact
   header is exchanged in both directions to set parameters of the
   connection.  In addition, a single AnnounceBundle is transmitted by
   each party (preceded by an SDNV containing the total length of the
   bundle).  The source endpoint identifier of this bundle is used to
   identify the local identity of each DTN node.

   Once the connection is established, bundles can be transmitted in
   either direction.  Each bundle is transmitted in one or more logical
   segments of formatted bundle data.  To transmit a bundle, a node
   first sends a START_BUNDLE message code, followed by one or more
   logical data segments, and then finally an END_BUNDLE code.  Each
   logical data segment is comprised of a DATA_SEGMENT code, an SDNV
   containing the length of the segment, and finally the byte range of
   the bundle data.  The choice of the length to use for segments is an
   implementation manner.

   An optional feature of the protocol is for the receiving node to send
   acknowledgements as bundle data segments arrive.  The rationale
   behind these acknowledgements is to enable the sender node to
   determine how much of the bundle has been received, so that in case
   the connection is interrupted, it can perform reactive fragmentation
   to avoid re-sending the already transmitted part of the bundle.

   When acknowledgements are enabled, then for each data segment that is
   received, the receiving node sends an ACK_SEGMENT code followed by an
   SDNV containing the cumulative length of the bundle that has been
   received.  Note that in the case of concurrent bidirectional
   transmission, then ack segments may be interleaved with data



Demmer                  Expires February 18, 2007               [Page 6]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   segments.

   For connections that are idle, a KEEPALIVE code may optionally be
   sent at a negotiated interval.  Finally, before connections close, a
   SHUTDOWN code is sent on the channel.














































Demmer                  Expires February 18, 2007               [Page 7]

Internet-Draft          DTN TCP Convergence Layer            August 2006


3.1.  Example Data Flow

   The following figure visually depicts the protocol exchange for a
   simple session, showing the connection establishment, and the
   transmission of a single bundle split into two data segments (of
   lengths L1 and L2) from Node A to Node B.

                Node A                              Node B
                ======                              ======

      +-------------------------+         +-------------------------+
      |     Contact Header      | ->   <- |     Contact Header      |
      +-------------------------+         +-------------------------+

      +-------------------------+         +-------------------------+
      |     Announce Bundle     | ->   <- |     Announce Bundle     |
      +-------------------------+         +-------------------------+

      +-------------------------+
      |      START_BUNDLE       | ->
      +-------------------------+
      |      DATA_SEGMENT       | ->
      +-------------------------+
      |      SDNV length [L1]   | ->
      +-------------------------+
      |     Bundle Data 0..L1   | ->
      +-------------------------+
                                          +-------------------------+
                                       <- |       ACK_SEGMENT       |
      +-------------------------+         +-------------------------+
      |      DATA_SEGMENT       | ->   <- |     SDNV Length [L1]    |
      +-------------------------+         +-------------------------+
      |      SDNV length [L2]   | ->
      +-------------------------+
      |     Bundle Data L1..L2  | ->
      +-------------------------+
                                          +-------------------------+
                                       <- |       ACK_SEGMENT       |
                                          +-------------------------+
      +-------------------------+      <- |    SDNV Length [L1+L2]  |
      |       END_BUNDLE        | ->      +-------------------------+
      +-------------------------+

      +-------------------------+         +-------------------------+
      |       SHUTDOWN          | ->   <- |         SHUTDOWN        |
      +-------------------------+         +-------------------------+





Demmer                  Expires February 18, 2007               [Page 8]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   Figure 2: A simple visual example of the flow of protocol messages on
             a single TCP session between two nodes (A and B)


4.  Connection Establishment

   For bundle transmissions to occur using the TCPCL, a connection must
   first be established between communicating nodes.  The manner in
   which a bundle node makes the decision to establish such a connection
   is implementation dependant.  For example, some connections may be
   opened proactively and maintained for as long as is possible given
   the network conditions, while other connections may be opened only
   when there is a bundle that is queued for transmission over it.

   To establish a TCPCL connection, a node must first establish a TCP
   session with the intended peer node, typically by using the services
   provided by the operating system.  If the node is unable to establish
   a connection for any reason, then it is an implementation manner to
   determine how to handle the failed connection.  For example, a node
   may decide to re-attempt to establish the connection, perhaps after
   some delay or it may attempt to find an alternate route for bundle
   data.

   Once a TCP session is established, both the connection initiator and
   the connection acceptor should immediately transmit a contact header
   over the session.  The format of the contact header is described in
   Section 4.1.

   Upon receipt of the contact header, both nodes perform the validation
   and negotiation procedures defined in Section 4.2

   After negotiation, both nodes transmit an announcement bundle
   (AnnounceBundle).  This exchange is used to inform the Bundle
   Protocol Agent running at each end of the connection of the Endpoint
   Identifier (EID) of the other party, as well as any additional
   capabilities that may be communicated.  The format of the
   AnnounceBundle is described in Section 4.3

4.1.  Contact Header

   Once a TCP session is established, both parties exchange a contact
   header.  This section describes the format of the contact header and
   the meaning of its fields.








Demmer                  Expires February 18, 2007               [Page 9]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   The format for the Contact Header is as follows:

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+---------------+---------------+
   |                          magic='dtn!'                         |
   +---------------+---------------+---------------+---------------+
   |     version   |     flags     |      keepalive_interval       |
   +---------------+---------------+---------------+---------------+

                      Figure 3: Contact Header Format

   The fields of the contact header are:

   magic:  A four byte field that always contains the byte sequence 0x64
        0x76 0x6e 0x21, i.e. the ASCII string "dtn!".

   version:  A one byte field value containing the current version of
        the protocol.

   flags:  A one byte field containing optional connection flags.  The
        first six bits are unused and must be set to zero.  The last two
        bits are interpreted as follows:

        +----------+---------------------------------------------+
        |   Value  |                   Meaning                   |
        +----------+---------------------------------------------+
        | 00000001 | Request acknowledgement of bundle segments. |
        | 00000010 | Request enabling of reactive fragmentation. |
        +----------+---------------------------------------------+

                       Table 1: Contact Header Flags

   keepalive_interval:  A two byte integer field containing the number
        of seconds between exchanges of keepalive messages on the
        connection (see Section 5.4).  This value is in network byte
        order, as are all other multi-byte fields described in this
        protocol.


   The manner in which values are configured and chosen for the various
   flags and parameters in the contact header is implementation
   dependent.

4.2.  Validation and parameter negotiation

   Upon reception of the contact header, both the connection initiator
   and the connection acceptor follow the following procedures for



Demmer                  Expires February 18, 2007              [Page 10]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   ensuring the validity of the connection and to negotiate values for
   the connection parameters.

   If the magic string is not present or is not valid, the connection
   must be terminated.  The intent of the magic string is to provide a
   some protection against an inadvertent TCP connection by a different
   protocol than the one described in this document.  To prevent a flood
   of repeated connections from a misconfigured application, a node may
   elect to hold an invalid connection open and idle for some time
   before closing it.

   If a node receives a contact header containing a version that is
   greater than the current version of the protocol that the node
   implements, then the node should interpret all fields and messages as
   it would normally.  If a node receives a contact header with a
   version that is lower than the version of the protocol that the node
   implements, the node may either terminate the connection due to the
   version mismatch, or may adapt its operation to conform to the older
   version of the protocol.  This decision is an implementation manner.

   A node calculates the parameters for a connection by negotiating the
   values from its own preferences (conveyed by the contact header it
   sent) with the preferences of the peer node (expressed in the contact
   header that it received).  This negotiation should proceed in the
   following manner:

        The segment acknowledgements enabled parameter is set to true
        iff the corresponding flag is set in both contact headers.

        The reactive fragmentation enabled parameter is set to true iff
        the corresponding flag is set in both contact headers.

        The keealive_interval parameter should be set to the minimum
        value from both contact headers.  If one or both contact headers
        contains the value zero, then the keepalive feature (described
        in Section 5.4) is disabled.


   Once this process of parameter negotiation is completed, the protocol
   defines no additional mechanism to change the parameters of an
   established connection; to effect such a change, the connection must
   be terminated and a new connection established.

4.3.  Announcement Bundle Exchange

   IMPLEMENTATION NOTE: The format of this announcement bundle is likely
   to change before the eventual publication of this document as an RFC.
   In particular, its format should be described in an external document



Demmer                  Expires February 18, 2007              [Page 11]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   that is referenced by this specification.

   Immediately following the contact header exchange, a single bundle is
   always transmitted over the link.  The contents of the bundle are
   defined as follows:

   The source endpoint identifier is set to an endpoint identifier (EID)
   for some singleton endpoint that the node is a member.  In the case
   that a node is a member of multilple singleton endpoints, it is an
   implementation manner to determine which identifier is used in the
   announcement bundle.  The destination, report-to, and custodian
   endpoint identifiers shall be set to the null endpoint ID ("dtn:
   none").

   The Announcement Bundle is defined as a new type of Administrative
   record with a type code of 0x05.  As such, the payload of the bundle
   is a single byte long, with the value 0x05 in the high-order four
   bits of the byte, and the lower four bits used for administrative
   record flags.  As none of the defined flags apply to this bundle, the
   lower-order four bits shall be set to zero.

   Based on these values, the format of the bundle is determined by the
   current version of the bundle protocol specification.


5.  Established Connection Operation

   This section describes the protocol operation for the duration of an
   established connection, including the mechanisms for transmitting
   bundles over the connection.

5.1.  Message Type Codes

   After the initial exchange of a contact header, all messages
   transmitted over the connection are denoted by a one byte message
   type code.















Demmer                  Expires February 18, 2007              [Page 12]

Internet-Draft          DTN TCP Convergence Layer            August 2006


      The types and values for the message type code are as follows.

   +----------------+--------+-----------------------------------------+
   |      Type      |  Code  | Comment                                 |
   +----------------+--------+-----------------------------------------+
   |  START_BUNDLE  |  0x01  | Commences the transmission of a new     |
   |                |        | bundle, described in section            |
   |                |        | Section 5.2.                            |
   |                |        |                                         |
   |   END_BUNDLE   |  0x02  | Indicates the completion of             |
   |                |        | transmission of a bundle, described in  |
   |                |        | section Section 5.2.                    |
   |                |        |                                         |
   |  DATA_SEGMENT  |  0x03  | Indicates the transmission of a segment |
   |                |        | of bundle data, described in section    |
   |                |        | Section 5.2.                            |
   |                |        |                                         |
   |   ACK_SEGMENT  |  0x04  | Acknowledges reception of a data        |
   |                |        | segment.  Following this type code, a   |
   |                |        | node transmits an SDNV denoting the     |
   |                |        | cumulative length of all received       |
   |                |        | segments.                               |
   |                |        |                                         |
   |    KEEPALIVE   |  0x05  | Keepalive message for the connection,   |
   |                |        | described in Section 5.4.               |
   |                |        |                                         |
   |    SHUTDOWN    |  0x06  | Indicates that one of the nodes         |
   |                |        | participating in the connection wishes  |
   |                |        | to cleanly terminate the connection,    |
   |                |        | described in Section 6.                 |
   +----------------+--------+-----------------------------------------+

                        Table 2: TCPCL Header Types

5.2.  Bundle Data Transmission

   Each bundle is transmitted in one or more data segments; to begin
   this sequence, a node sends a START_BUNDLE message, then sends the
   segments (each preceded by a DATA_SEGMENT type code), then completes
   the transmission by sending an END_BUNDLE message.

   Determining the segment size is an implementation manner.  In
   particular, a node may, based on local policy or configuration, only
   ever transmit bundle data in a single segment.  However a node must
   be able to receive a bundle that has been tranmsmitted in any segment
   size.

   In the bundle protocol specification, a single bundle is comprised of



Demmer                  Expires February 18, 2007              [Page 13]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   a primary bundle block, plus zero or more additional bundle blocks.
   The relationship between the protocol blocks and the convergence
   layer segments is underfined.  In particular, a segment may contain
   more than one protocol block; alternatively, a single protocol block
   (such as the payload) may be split into multiple segments.

   Once a transmission of a bundle has commenced, the node must only
   send segments related to that bundle until it sends an END_BUNDLE
   message.  However, the node need not transmit the entire bundle
   before sending the END_BUNDLE message.  Once any data segment of the
   bundle is complete, the node may send an END_BUNDLE message and then
   cease transmission of the bundle.

   Each segment transmission is preceded by a DATA_SEGMENT type code and
   an SDNV containing the length of that segment.

5.3.  Bundle Acknowledgements

   Although the TCP transport provides reliable transfer of data between
   hosts, the typical BSD sockets interface provides no means to inform
   a sending application of when the receiving application has processed
   some amount of transmitted data.  Thus after transmitting some data,
   a bundle protocol agent needs an additional mechanism to determine
   whether the receiving agent has successfully received the transmitted
   data.

   To this end, the TCPCL protocol offers an optional feature whereby a
   receiving node transmits acknowledgements of reception of data
   segments.  This feature is enabled if and only if during the exchange
   of contact headers, both parties set the flag to indicate that
   segment acknowledgements are enabled (see Section 4.1).  If so, then
   the receiver must transmit a bundle acknowledgement header when it
   successfully receives each data segment.

   To transmit a data segment acknowledgement header, a node first
   transmits a ACK_SEGMENT message type code, then transmits an SDNV
   containing the cumulative length of the received segment(s) of the
   current bundle.  For example, suppose the sending node transmits four
   segments of bundle data with lengths 100, 200, 500, and 1000
   respectively.  After receiving the first segment, the node sends an
   acknowledgement of length 100.  After the second segment is received,
   the node sends an acknowledgement of length 300.  The third and
   fourth acknowledgements are of length 800 and 1800 respectively.

5.4.  Keepalive Messages

   The protocol includes a provision for transmission of keepalive
   messages over the TCP connection to help determine if the connection



Demmer                  Expires February 18, 2007              [Page 14]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   has been disrupted.

   As described in Section 4.1, one of the parameters in the contact
   header is the keepalive_interval.  Both sides populate this field
   with their requested intervals (in seconds) between keepalive
   messages.

   The format of a keepalive message is a one byte message type code of
   KEEPALIVE (as described in Table 2, with no additional data.  Both
   sides should send a keepalive message whenever the negotiated
   interval has elapsed with no transmission of any message (keepalive
   or other).

   If no message (keepalive or other) has been received for at least
   twice the keepalive interval, then either party may terminate the
   session by transmitting a one byte message type code of SHUTDOWN (as
   described in Table 2) and closing the TCP connection.


6.  Connection Termination

   This section describes the procedures for ending a TCPCL connection.

6.1.  Shutdown Message

   To cleanly shut down a connection, a one byte message type code of
   SHUTDOWN may be transmitted at any time by either the sender or the
   receiver.  When a node receives a SHUTDOWN message, it should send a
   SHUTDOWN message in return, then close the connection and clean up
   the TCP session.

   If a connection is terminated before another protocol message has
   completed, then the node must not transmit the SHUTDOWN message but
   still should close the TCP connection.  In particular, if the
   connection is interrupted while a node is in the process of
   transmitting a bundle data segment, then the node may identify that
   the connection should be before it has completed the transmission of
   the data segment.  Thus were the node to transmit the SHUTDOWN
   message, the receiving node might erroneously interpret the SHUTDOWN
   message to be part of the data segment.

6.2.  Idle Connection Shutdown

   The protocol includes a provision for clean shutdown of idle TCP
   connections.  Determining the length of time to wait before closing
   idle connections, if they are to be closed at all, is an
   implementation and configuration matter.




Demmer                  Expires February 18, 2007              [Page 15]

Internet-Draft          DTN TCP Convergence Layer            August 2006


   If there is a configured time to close idle links, then if no bundle
   data (other than keepalive messages) has been received for at least
   that amount of time, then either node may terminate the session by
   transmitting a one byte message type code of SHUTDOWN (as described
   in Table 2) and closing the TCP session.


7.  Requirements notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [1].


8.  Security Considerations

   XXX something about DOS and peer identification


9.  IANA Considerations

   XXX something about a well-known port


10.  References

   [1]  YZ, X., "XXX".

   [2]  Cerf et al, V., "Delay-Tolerant Network Architecture".

   [3]  Scott, K. and S. Burleigh, "Bundle Protocol Specification".

   [4]  Demmer et al, M., "Implementing Delay Tolerant Networking".

   [5]  "XXX TCP RFC".


Author's Address

   Michael J. Demmer
   University of California, Berkeley
   Computer Science Division
   445 Soda Hall
   Berkeley, CA  94720-1776
   US

   Email: demmer@cs.berkeley.edu




Demmer                  Expires February 18, 2007              [Page 16]

Internet-Draft          DTN TCP Convergence Layer            August 2006


Full Copyright Statement

   Copyright (C) The Internet Society (2006).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Acknowledgment

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).





Demmer                  Expires February 18, 2007              [Page 17]

