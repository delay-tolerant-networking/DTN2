Reference Implementation Discussion Notes
Friday, June 11, 2004
-----------------------------------------

* Add SCPS to CLs


Review Notes from Last Meeting

//  Convergence Layers --> Data Plane, Control Plane
//  * not dynamically loadable
//  * not required to be reliable
//      - configurable? (eg by granularity of precision, or reliable/not reliable)
//  * not required to have a control part
//      - but it *is* and option (eg by inheritance)
//  * standard set of convergence layers
//      - TCP, UDP, URL/website
//      - sneakernet, USB, UUCP
//      - SCTP
//      - bluetooth (should this be over TCP?)

        - SCPS - include satellite convergence layer (there exists '96 paper)

//  * IDs for connections/whatever
//  * Routing function passes connection object from control to data?

//  Control Plane: responsible for neighbor bundle node discovery
//  Data Plane: responsible for delivering bundle to next bundle hop

//  Application - LPC
//  * some IPL mechanism
//  * we are still not well informed enough about

    - Mike used Boost, and he doesn't like it
       - a way to do serialization of data types
       - nice things, but you are required to include huge library
         - not componentized well, s.t. you can use subset of features
       - since they use templates, all code must be in .h file!

//  LPC/marshalling/serialization systems
//  * is there a portable shared memory system?
//  * investigate capabilities of IDL, DCE, and XDR
//  * keshav's suggested remedies (boost, post++)

    * MIKE: do above investigation (+ NDR and Post__)
      - concl: if there is a package we should use it, and if there isn't
        then we can write our own

//  * desire for standardized "flat" format for communication

The Plan:
+-----------------------------------------------------+
|  Weekly Meetings: 10.00-12.30 Fridays  (6/18,6/25)  |
+-----------------------------------------------------+
(Next Architecture Meeting:
   MON 6/21    10.30-12.30
   TUE 6/22    10.00-12.30 )

* Choosing the scaffolding
* Interfaces
  - c++ interface draft #1
* Set up machines/repositories, makefiles


//  Bundling Components
//  * [fuzzy] Routing Lookup
//  * [fuzzy] Routing Protocol
//  * Forwarding/Delivery
//  * [fuzzy] Scheduling

MELISSA:
//  * Persistent Object Storage --> bundle, state, refs, registrations?

TING:
//  * Timers
//       - bundle expiration
//       - custody

MELISSA:
//  * Fragmentation

//  * [fuzzy] Security

KEITH?
//  * Management Interface
          - scope out what needs to be involved
     - injection of routes
     - cl can invoke api
     - maybe a external service can also invoke api?
     - also LPC
  -----------------+---+
    Bundle Daemon  | A | <-?-- [cmd line]
                   | P |             |?
   | I | <---[LPC] <-/
  -----------------+---+
                     ^
  +------------+     |
  |     CL     |-----/
  +------------+ 

//  * Implementation of User API
//  * Debug Interface
//  * Configuration Parser
       - threads vs events
       - SWIG - generates c wrapper for tcl
             -> does tcl/c marshalling
     -> MIKE: will try SWIG for tier project
     -> http://www.swig.org/papers/Tcl98/TclChap.html
       - oTcl  and Tcl/cl
             -> mike: in the interests of readability/easy-to-understand-ne=
ss,
        would prefer not oTcl
     -> set function takes argc argv
       - XML -> doesn't really support commands like "route add..."
             -> better for pure representation
     -> MPS (microsoft) supports programming in XML
       - also use interpreter for command-line

//  * Registration
//  * Adjacency Detection
//  * Events?

Note: Mike wants to link the bundle daemon stuff with TIER code.
therefore:
* libraries
* mike/tier will have own driver program
* dtn will have separate reference driver program

Note: libtool (kevin likes for shared objects across systems)
      - cross-compile for other platforms
      - **create makefiles s.t. if we need to add it later, we can**
      - **allow choice of using libtool or not**
      - apparently changed so that it doesn't infer mode
   

//  Database/Object Storage
//  * high level API (getExpiredBundles() vs select(bundles,
//  where=3Dexpiration < now))

    * MELISSA: I will come up with preliminary class definition for DataStore

//  * event-based?
//  * ability to support different underlying databases
//     - berkeleyDB, DHTs?, postgres, mysql, ODBC
