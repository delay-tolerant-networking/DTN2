Reference Implementation Discussion Notes
Friday, June 18, 2004
-----------------------------------------

NDR - didn't really get looked at
2 uses we talked about:
	storage and maybe wire format
		so these do not need to be the same thing.
		Proposal-- hand pack wire format; use database's format for persistence.
	but this may be in conflict with bundle format
	it may be hard to control efficiency of output format
	-- somebody to figure out this tradeoff.

DB comment:
	semantic names of functions which might be implemented by 1-liner mySqL comments
	**Sushant will write** a cut at:
		storage manager vs things to be stored
	'build-time' security

Timer Class (Ting):
	2 patterns - regularly set up timer [fixed]
		one shot
		periodic
	Currently: AddEvent(Time, interval, event handler, void* data, int size)
		at time Time, go off every interval

		used for: scheduled contact, clean up expired bundles, reigstrations

	Question: what is the thread of control that runs the event timer
		Hashed hierarchical timing wheels

	Note that there may be vastly different timers
		e.g. for bundle expiration versus connection retry

	take a lock on this thing

Events and syncrhonization

	epoll, select has significant overhead
	Scott: sys5 message queues and semaphores
		Platform and Platform_sm libraries from JPL
		(abstraction of IPC and other stuff)
		message queueus pipes, semaphores, shared memory

		token over queue is reference to shared memory

	Mike: can have a sync q protected by lock or whatever
		approaches: like flippy
	
	Kevin: what about the thing in EmStar

	Scott: load up a shared LL in mem, and just give a semaphore a nudge

Implementation of locks

	there are spinlocks and sleeplocks
	maybe Lock base class to hold thread

Structured Exceptions?

	Mike: NO
		how do you figure out where the exception was thrown from?
		Java requires declaring of exceptions; C++ doesn't

	Keshav: not really -pro- exceptions
	Scott: don't see so much value in C++
	Melissa: but uncaught errors via exceptions are easier to find than missed
		return codes

Debug / Logging
	Mike has something

SWIG/Tcl:
	Mike: not so good for command interpreter
	still can go with tclcl

Repositories:
	doxygen - create web pages out of code
		- like javadoc
	Coding conventions:
		4 spaces for indenting [no tabs :( ]
		no upper case for variable names or methods (_ is ok)
		classes start with Capital, mixed case only for class names
		trailing underscore for all instance variables
		constants or #defines are ALL_CAPITALS
		Globals:: for all global vars
		file names are lower case with _ 
		classes and related classes in file
			file name is main object
		globals.h for global constants

		/**
		 * this way
		 */
			foo bar baz // this sucks

		while (1) {
			foo
		}
		
		do {
			1
			2
		} while (!done)

		if (this) {
			
		
		if (foo && (foo || baz) || bar ||
                    !impersonator && is_full)
	        {
			faz bar bill
		} else {
			this is it
		}

		for (int i = 0; i < 3; i++)

		class ClassName {
		public:
			ClassName() : init1_(23), blah_(12) { };
			virtual int test() = 0;

		protected:
			int xxx_;

		private:

		};

Internationalization
	we probabl won't do internationalized error messages, but
	int'lized configuration and management seems important
